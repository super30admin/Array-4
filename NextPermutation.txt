/**
Time Complexity - O(1)  Max Int is 10 digits
Space Complexity - O(1)
 */
class Solution {
    public void nextPermutation(int[] nums) {
        if (nums == null) {
            return;
        }
        
        // find the decline
        int i = nums.length -2;
        while (i >0 && nums[i] >= nums[i+1]) {
            i--;
        }

        // swap to next greater number
        if (i > 0) {
            int j = nums.length -1;
            while (nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        // reverse
        reverse(nums, i+1, nums.length-1);
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[j];
        nums[j] = nums[i];
        nums[i] = temp; 
    } 

    private void reverse(int[] nums, int i, int j) {
        while(i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }
}
