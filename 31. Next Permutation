Time complexity: O(n)
Space complexity: O(1)
Did this code successfully submitted on leetcode: Yes

class Solution {
    public void nextPermutation(int[] nums) {
        
        int pos = nums.length-2;
        
        while(pos>=0 && nums[pos]>=nums[pos+1]){
            pos--;
        }
        
        if(pos<0){
            reverse(nums,pos+1,nums.length-1);
            return;
        }
        
        for(int j=nums.length-1; j>pos; j--){
            if(nums[j]>nums[pos]){
                swap(nums,pos,j);
                break;
            }
        }
        
        reverse(nums,pos+1,nums.length-1);
        return;
    }
    
    public void swap(int[] nums, int i, int j){
       int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
        return;
    }
    
    public void reverse(int[] nums, int i, int j){
        while(i<=j){
            swap(nums, i, j);
            i++;
            j--;
        }
        return;
    }
}
