class Solution:
    
    def reverse(self, nums, i, j):
        while(i < j):
            nums[i], nums[j] = nums[j], nums[i];
            i += 1;
            j -= 1;
        
    
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums);
        idx = 0;
        # traverse from the end of the array 
        for i in range(n-1, 0, -1):
            # check whether current element is greater than the previous element
            if(nums[i] > nums[i-1]):
                idx = i;
                break;
        
        # if the given array is in descending order
        # reverse the entire array
        if(idx == 0):
            self.reverse(nums, 0, n-1);
            return
        
        # first reverse the elements next to idx
        
        self.reverse(nums, idx, n-1);
        
        
        
        #find the exact position for nums[idx-1]
        elt = nums[idx -1];
        
        # traverse from the index idx
        for i in range(idx, n):
            if(elt < nums[i]):
                nums[i], nums[idx -1] = nums[idx - 1], nums[i];
                break;
            
        return
    
    '''
    time complexity = O(n)
    space complexity = O(n)
    '''
        
        
            
        
