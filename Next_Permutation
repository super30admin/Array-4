//Timecomplexity.    O(n)
//SpaceCompelxity.   O(1)

public void nextPermutation(int[] nums) {
        if(nums.length == 0)return;

        int n = nums.length;
        int i =  n-2;

        while(i >= 0 && nums[i] >= nums[i+1]){
                i--;
            }
            int start = i;

            if(i != -1){
            i = n-1;
            while(i >= 0 && nums[i] <= nums[start]){
                i--;               
            }
             swap(nums,start,i);   
            } 
        
            reverse(nums,start+1);            
        }

        private void reverse(int[] nums, int i){
       
         
        int j = nums.length - 1;
        
        while (i < j) {
            
            swap(nums, i, j);
            i++;
            j--;
        }
        }

        private void swap(int[] nums,int i, int j){

            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
        }
    }
