class Solution {
    public void nextPermutation(int[] nums) {
        
        if(nums == null)
            return;
        
        //which is breaking pattern
        
        int n = nums.length;
        int i = n-2;
        
        while(i>=0 && nums[i] >= nums[i+1]){
            i--;
        }
        
        //swap with next highest num
        if(i >=0){
            int j= n-1;
            
            while(nums[i] >= nums[j]){
                j--;
            }
            
            swap(nums,i,j);
        }
        
        //rev next nums to i
        
        reverse(nums,i+1,n-1);
        
    }
    
    private void swap(int[] nums,int i,int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    private void reverse(int[] nums,int i,int j){
        
        while(i<j){
            swap(nums,i,j);
            i++;
            j--;
        }
    }
}