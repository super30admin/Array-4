#Next Permutation
#tc: O(n)
#sc: O(1)
class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        for curr in reversed(range(0, len(nums) - 1)):
            if nums[curr] >= nums[curr + 1]:
                continue;
                
            next = curr + 1;
            while next < len(nums) and nums[next] > nums[curr]:
                next += 1;
                
            nums[curr], nums[next - 1] = nums[next - 1], nums[curr];
            
            nums[curr+1:] = reversed(nums[curr+1:])
                
            return nums;
                    
        return nums.sort();
        
#Maximum Subarray
#tc: O(len(nums))
#sc: O(1)
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxi=max(nums)
        res=0
        for i in range(len(nums)):
            if nums[i]>=0:
                res+=nums[i]
                if res>maxi:
                    maxi=res
            if nums[i]<0:           
                res+=nums[i]
                if res>maxi:
                    maxi=res
                if res<0:
                    res=0
        return maxi
    
