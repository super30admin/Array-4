#Maximum SubArray


This algorithm has a time complexity of O(n) since we iterate through the array only once, where n is the length of the array nums. 
The space complexity is O(1) because we only use a constant amount of extra space regardless of the input size.


class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = nums[0]  # Initialize max_sum with the first element of the array
        current_sum = nums[0]  # Initialize current_sum with the first element of the array
        
        # Iterate through the array starting from the second element
        for num in nums[1:]:
            # We have two choices: either extend the current subarray or start a new subarray
            # We choose the maximum between num and num + current_sum to determine the new current_sum
            current_sum = max(num, num + current_sum)
            
            # Update max_sum with the maximum between max_sum and current_sum
            max_sum = max(max_sum, current_sum)
        
        return max_sum
