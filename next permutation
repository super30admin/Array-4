// Time Complexity : O(n)
// Space Complexity : O(1)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No

// For getting next greater element, from the right keep checking if any digit is < its right digit and swap it with just greater digit to its right and reverse its right digits

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return;
        // finding the breach
        int i = n - 2;
        while(i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        if(i >= 0) {
            int j = n - 1;
            while(nums[j] <= nums[i] && j >= 1) {
                j--;
            }
            swap(nums[i], nums[j]);
            reverse(nums, i + 1, n - 1);
        } else {
            reverse(nums, 0, n - 1);
        }
        
    }

    void reverse(vector<int>& nums, int i, int j) {
        if(i == j) return;
        while(i < j) {
            swap(nums[i], nums[j]);
            i++;
            j--;
        }
    }
};