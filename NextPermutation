// Time Complexity: O(n)
// Space: O(1)


class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length == 0 )return;

        int i = nums.length - 2;

        // Step 1: Find the first ascending breach from the end

        while(i >= 0 && nums[i] >= nums[i+1]){
            i--;
        }

        // stop at i = -1 or breach point

        // Step 2: Find the digit to replace it with

        int j = nums.length - 1;

        if(i >= 0){
            while(nums[j] <= nums[i]){
                j--;
            }
            swap(nums, i , j);
        }

        // Step 3: Reverse all the numbers
        reverse(nums, i+1, nums.length - 1);

    }


    private void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private void reverse(int[] nums, int start, int end){
        while(start < end){
            swap(nums, start, end);
            start++;
            end--;
        }
    }
}
